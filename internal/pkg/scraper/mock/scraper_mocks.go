// Code generated by MockGen. DO NOT EDIT.
// Source: scraper.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	url "net/url"
	reflect "reflect"

	scraper "github.com/buni/scraper/internal/pkg/scraper"
	gomock "github.com/golang/mock/gomock"
)

// MockScraperService is a mock of ScraperService interface.
type MockScraperService struct {
	ctrl     *gomock.Controller
	recorder *MockScraperServiceMockRecorder
}

// MockScraperServiceMockRecorder is the mock recorder for MockScraperService.
type MockScraperServiceMockRecorder struct {
	mock *MockScraperService
}

// NewMockScraperService creates a new mock instance.
func NewMockScraperService(ctrl *gomock.Controller) *MockScraperService {
	mock := &MockScraperService{ctrl: ctrl}
	mock.recorder = &MockScraperServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScraperService) EXPECT() *MockScraperServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockScraperService) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockScraperServiceMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockScraperService)(nil).Close), ctx)
}

// ScrapePages mocks base method.
func (m *MockScraperService) ScrapePages(ctx context.Context, urls []*url.URL, reqOptions ...scraper.ScrapeRequestOption) []scraper.Result {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, urls}
	for _, a := range reqOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScrapePages", varargs...)
	ret0, _ := ret[0].([]scraper.Result)
	return ret0
}

// ScrapePages indicates an expected call of ScrapePages.
func (mr *MockScraperServiceMockRecorder) ScrapePages(ctx, urls interface{}, reqOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, urls}, reqOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapePages", reflect.TypeOf((*MockScraperService)(nil).ScrapePages), varargs...)
}
