// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	links "github.com/buni/scraper/internal/api/links"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// EnqueueLinksJob mocks base method.
func (m *MockService) EnqueueLinksJob(ctx context.Context, req links.EnqueueLinksJobRequest) (links.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueLinksJob", ctx, req)
	ret0, _ := ret[0].(links.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueLinksJob indicates an expected call of EnqueueLinksJob.
func (mr *MockServiceMockRecorder) EnqueueLinksJob(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueLinksJob", reflect.TypeOf((*MockService)(nil).EnqueueLinksJob), ctx, req)
}

// ExecuteLinksJob mocks base method.
func (m *MockService) ExecuteLinksJob(ctx context.Context, jobID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteLinksJob", ctx, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteLinksJob indicates an expected call of ExecuteLinksJob.
func (mr *MockServiceMockRecorder) ExecuteLinksJob(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteLinksJob", reflect.TypeOf((*MockService)(nil).ExecuteLinksJob), ctx, jobID)
}

// GetLinksJobStatus mocks base method.
func (m *MockService) GetLinksJobStatus(ctx context.Context, req links.GetJobStatusRequest) ([]links.JobResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinksJobStatus", ctx, req)
	ret0, _ := ret[0].([]links.JobResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinksJobStatus indicates an expected call of GetLinksJobStatus.
func (mr *MockServiceMockRecorder) GetLinksJobStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinksJobStatus", reflect.TypeOf((*MockService)(nil).GetLinksJobStatus), ctx, req)
}
